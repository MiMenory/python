# Семинар 6

# генератор списка (вычисляет но не хранит числа в памяти)
# алгоритм который должен вычислять простые числа (в огромном диапазоне)

# b = (i for i in range(10**100) if i % 2 == 1)
# for i in b:
#     print(i)
#     if i > 100:
#         break



from random import randint


# Даны два массива чисел. Требуется вывести те элементы
# первого массива (в том порядке, в каком они идут в первом
# массиве), которых нет во втором массиве. 

# Пользователь вводит число N - количество элементов в первом массиве, 
# затем N чисел - элементы массива. 
# Затем число M - количество элементов во втором массиве. 
# Затем элементы второго массива

# Ввод:           Вывод:
# 7               3 3 2 12
# 3 1 3 4 2 4 12
# 6
# 4 15 43 1 15 1 

# (каждое число вводится с новой строки)

a = int(input('Кол-во элементов 1 массива: '))
c = []
one_list = [i for i in range(a)]
for i in one_list:
    b = randint(1, 10)
    c.append(b)
    if i == a:
        break

a1 = int(input('Кол-во элементов 2 массива: '))
c1 = []
one_list1 = [i for i in range(a1)]
for i in one_list1:
    b1 = randint(1, 10)
    c1.append(b1)
    if i == a1:
        break

print(f"Первый список: {c}")
print(f"Второй список: {c1}")

c3 = []
for i in range(len(c)):
    if c[i] not in c1:
        c3.append(c[i])
print(c3)


# Задача №41. Решение в группах
# Дан массив, состоящий из целых чисел. Напишите
# программу, которая в данном массиве определит
# количество элементов, у которых два соседних и, при
# этом, оба соседних элемента меньше данного. Сначала
# вводится число N — количество элементов в массиве
# Далее записаны N чисел — элементы массива. Массив
# состоит из целых чисел.

# Ввод:       Ввод:
# 5           5
# 1 2 3 4 5   1 5 1 5 1
# Вывод:      Вывод:
# 0            2


list = [1, 5, 1, 5, 1]
k = 0
numb = int(input('Введиче число: '))
for i in range(1, len(list) - 1):
    if list[i - 1] < list[i] > list[i + 1]:
        k += 1
        print(k)






# Задача №43. Решение в группах
# Дан список чисел. Посчитайте, сколько в нем пар
# элементов, равных друг другу. Считается, что любые
# два элемента, равные друг другу образуют одну пару,
# которую необходимо посчитать. Вводится список
# чисел. Все числа списка находятся на разных
# строках.

# Ввод:               Вывод:
# 1 2 3 2 3           2


list = [1, 3, 3, 3, 3]
list_copy = list[:]
count = 0
a = int(input('Имещ пару: '))
for i in range(len(list)):
    if a == list[i]:
        count += 1
print(count)


# Задача №45. Решение в группах
# Два различных натуральных числа n и m называются дружественными, если сумма делителей числа n
# (включая 1, но исключая само n) равна числу m и наоборот. Например, 220 и 284 – дружественные числа.
# По данному числу k выведите все пары дружественных чисел, каждое из которых не превосходит k. 
# Программа получает на вход одно натуральное число k, не превосходящее 105. 
# Программа должна вывести все пары дружественных чисел, каждое из которых не превосходит k. 
# Пары необходимо выводить по одной в строке, разделяя пробелами. 
# Каждая пара должна быть выведена только один раз (перестановка чисел новую пару не дает).

# Ввод:                   Вывод:
# 300                     220 284


def summ_del(number):
    summa = 1
    for i in range(2, number //  2 + 1):
        if number % i == 0:
            summa += i
    return summa
    
k = 300
for i in range(k):
    print(i, summ_del(i))